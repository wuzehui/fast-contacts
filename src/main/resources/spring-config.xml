<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"  
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
          http://www.springframework.org/schema/task 
          http://www.springframework.org/schema/task/spring-task-3.1.xsd   
          ">
	<!-- Scans the classpath of this application for @Components to deploy as 
		beans -->
	<context:component-scan base-package="com.chinadreamer.contacts.*,demo.*">
			<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:annotation-config />  
	
	
	<!-- 配置数据源 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"
		id = "dataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/fastcontacts"></property>
		<property name="username" value="root"/>
		<property name="password" value="Password2"/>
		<!-- 连接池启动时的初始值 -->  
        <property name="initialSize" value="10"/>
        <!-- 连接池的最大值 -->  
        <property name="maxActive" value="60000"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->  
        <property name="maxIdle" value="20"/>
        <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->  
        <property name="minIdle" value="5"/>
	</bean>
	<!-- transaction 
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
       	<property name="dataSource" ref="dataSource"/>  
	</bean>  -->
	<!-- 事务拦截器 -->
	<!-- 配置事务拦截器  
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
   		<property name="transactionManager" ref="transactionManager"/>
   		<property name="transactionAttributes">
    	<props>
     		<prop key="*">PROPAGATION_REQUIRED</prop>
     		<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
     		<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
     		<prop key="request*">PROPAGATION_REQUIRED,readOnly</prop>
    	</props>
   		</property>
	</bean>
    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
   		<property name="beanNames">
    	<value>*Service</value>
   		</property>
   		<property name="interceptorNames">
    	<list>
     		<value>transactionInterceptor</value>
    	</list>
   		</property>
	</bean>
	
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
   		<property name="transactionInterceptor" ref="transactionInterceptor"/>
	</bean> --> 
    
	<!-- jdbc template 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
    	<property name="dataSource" ref="dataSource"/>  
	</bean>  -->
	
	
	<!-- JPA实体管理工厂的配置 -->  
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>  
		<property name="packagesToScan" value="com.chinadreamer.contacts.**.entity"/><!--待扫描的实体类包，不再需要persistence.xml了-->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	<!--指定实现JPA的适配器-->
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		 <property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />  
	</bean>
	
	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"> 
		<property name="entityManagerFactory" ref="entityManagerFactory"/>   
	</bean>
	
	<!-- LazyInitializationException: could not initialize proxy no session -->
  	<!-- 此拦截器会注入到servlet配置中的DefaultAnnotationHandlerMapping中 
  	<bean name="openEntityManagerInViewInterceptor" 
    	class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
    	<property name="entityManagerFactory"><ref bean="entityManagerFactory" />
    	</property>
  	</bean>-->
	
	<!-- Spring Data Jpa配置 --> 
	 <jpa:repositories 
	 base-package="com.chinadreamer.contacts.**.repository"  
	 transaction-manager-ref="transactionManager" 
	 entity-manager-factory-ref="entityManagerFactory"/> 
	 
	 <!-- 使用annotation定义事务 
     <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />  -->  
     
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="batchSave*" propagation="REQUIRED"/>
            <tx:method name="batchDelete*" propagation="REQUIRED"/>

<!--             hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <!-- <tx:method name="count*" propagation="REQUIRED" read-only="true"/> -->
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="page*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
	
    <aop:config expose-proxy="true" proxy-target-class="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.chinadreamer.contacts..service..*.*(..))"/>
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
	
	<import resource="shiro-config.xml"/>
</beans>